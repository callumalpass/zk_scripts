#!/usr/bin/env bash

CONFIG_FILE="$HOME/.config/zk_scripts/config.yaml"

SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"
source "$SCRIPT_DIR/config_loader.sh"


# source /home/calluma/mybin/config_loader.sh

load_config "$CONFIG_FILE" "zk_index" # Call load_config with config file and script section name


if [[ -z "${NOTES_DIR:-}" ]]; then
  echo "Error: NOTES_DIR is not defined. Please configure in $CONFIG_FILE or set as environment variable." >&2
  exit 1
fi

ZK="$NOTES_DIR"
INDEX="$INDEX_FILE" # Use configured INDEX_FILE

cd "$ZK"

fd -I --strip-cwd-prefix --print0 --extension md $FD_EXCLUDE_PATTERNS --print0 | \
xargs -0 -P "$(nproc)" gawk '
  function quote(str) {
    # Simple quoting function: escape any double quotes and wrap the string in quotes.
    gsub(/"/, "\\\"", str);
    return "\"" str "\""
  }

  BEGINFILE {
    # Reset per-file state.
    fname = FILENAME;
    sub(/\.md$/, "", fname);
    in_yaml = 0;
    got_yaml = 0;
    yaml_content = "";
    link_count = 0;
    delete links;
  }

  {
    line = $0

    # If the first line is the YAML front matter start marker.
    if (FNR == 1 && line ~ /^---[[:space:]]*$/) {
      in_yaml = 1;
      got_yaml = 1;
      next;
    }
    if (in_yaml) {
      if (line ~ /^---[[:space:]]*$/) {
        in_yaml = 0;
        next;
      }
      # Accumulate front matter lines.
      yaml_content = yaml_content line "\n";
      next;
    }

    # Scan the current line for Obsidian-style wikilinks.
    while (match(line, /\[\[([^|\]]+)(\|[^]]+)?\]\]/, arr)) {
      link = arr[1];
      # Remove any backslashes from the wikilink target.
      gsub(/\\/, "", link);
      # Avoid duplicate links.
      dup = 0;
      for (i = 1; i <= link_count; i++) {
        if (links[i] == link) {
          dup = 1;
          break;
        }
      }
      if (!dup) {
        link_count++;
        links[link_count] = link;
      }
      line = substr(line, RSTART + RLENGTH);
    }
  }

  ENDFILE {
    # Begin a new YAML document.
    print "- filename: " quote(fname);

    # Instead of wrapping front matter in a key, output it directly.
    if (got_yaml) {
      n = split(yaml_content, lines, "\n");
      for (i = 1; i <= n; i++) {
         if (length(lines[i]) > 0)
            print "  " lines[i];
      }
    }

    if (link_count > 0) {
      print "  outgoing_links:";
      for (i = 1; i <= link_count; i++) {
         print "  - " quote(links[i]);
      }
    } else {
      print "  outgoing_links: []";
    }
  }
  '  | yq -o=json > "$INDEX"
# Optionally archive a YAML version for reference.
# cp "$yamltemp" "$INDEX_YAML_FILE" # Use configured INDEX_YAML_FILE



