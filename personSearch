#!/usr/bin/env python3
"""
A Python version of the personSearch script.
This script loads configuration from a YAML file, runs a listing command via py_zk
(filtered for the “person” tag), pipes its output to fzf with custom keybindings and preview,
processes the selected result to extract additional fields, and finally sends a formatted link
to the active tmux pane.
"""

import os
import sys
import subprocess
import yaml
import argparse

def load_config(config_file, section):
    """
    Load YAML config and return the configuration dictionary for the given section.
    """
    try:
        with open(config_file, "r") as f:
            config = yaml.safe_load(f)
    except Exception as e:
        print(f"Error loading config file {config_file}: {e}", file=sys.stderr)
        sys.exit(1)
    if section not in config:
        print(f"Section '{section}' not found in config file", file=sys.stderr)
        sys.exit(1)
    return config[section]

def main():
    parser = argparse.ArgumentParser(description="personSearch Python version")
    parser.add_argument("--debug", action="store_true", help="Enable debug output")
    args = parser.parse_args()

    home = os.environ.get("HOME")
    config_file = os.path.join(home, ".config", "zk_scripts", "config.yaml")
    cfg = load_config(config_file, "personSearch")

    try:
        notes_dir = cfg["notes_dir"]
        py_zk = cfg["py_zk"]
        # Optional: use a configured bat command; default to "bat" if not set.
        bat_command = cfg.get("bat_command", "bat")
    except KeyError as e:
        print(f"Missing configuration key: {e}", file=sys.stderr)
        sys.exit(1)

    # Change directory to the notes directory.
    try:
        os.chdir(notes_dir)
    except Exception as e:
        print(f"Unable to change directory to {notes_dir}: {e}", file=sys.stderr)
        sys.exit(1)

    # Build the command to list person notes.
    list_cmd = [
        py_zk, "list",
        "--mode", "notes",
        "-i", "index.json",
        "--filter-tag", "person",
        "--fields", "filename",
        "--fields", "aliases",
        "--fields", "givenName",
        "--fields", "familyName",
        "--color", "always"
    ]
    if args.debug:
        print("[DEBUG] Running list command:", " ".join(list_cmd))

    try:
        p_list = subprocess.Popen(list_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    except Exception as e:
        print(f"Error running list command: {e}", file=sys.stderr)
        sys.exit(1)

    # Build fzf arguments.
    fzf_cmd = [
        "fzf",
        "--bind", f"ctrl-e:execute[nvim {notes_dir}/{{1}}.md]",
        "--bind", "one:accept",
        "--delimiter", "::",
        "--with-nth", "2,3,4",
        "--tiebreak", "begin,index",
        "--info", "right",
        "--ellipsis", "",
        "--preview-label", "",
        "--preview", f"{bat_command} {notes_dir}/{{1}}.md",
        "--preview-window", "wrap:50%:<40(up)",
        "--ansi"
    ]
    if args.debug:
        print("[DEBUG] fzf command:", " ".join(fzf_cmd))

    try:
        # Pipe the py_zk list output into fzf.
        fzf_result = subprocess.run(fzf_cmd, stdin=p_list.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        p_list.stdout.close()
    except Exception as e:
        print(f"Error running fzf: {e}", file=sys.stderr)
        sys.exit(1)

    selection = fzf_result.stdout.strip()
    if args.debug:
        print("[DEBUG] fzf selection:", selection)

    if not selection:
        sys.exit(0)

    # Parse the selection (fields separated by "::").
    parts = selection.split("::")
    filename = parts[0].strip()

    # Run py_zk to fetch additional fields (aliases and givenName) for the selected note.
    fields_cmd = [
        py_zk, "list",
        "--mode", "notes",
        "-i", "index.json",
        "--stdin",
        "--fields", "aliases",
        "--fields", "givenName"
    ]
    try:
        result = subprocess.run(fields_cmd, input=filename, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    except Exception as e:
        print(f"Error running fields command: {e}", file=sys.stderr)
        sys.exit(1)

    fields_output = result.stdout.strip()
    fields_parts = fields_output.split("::")
    aliases = fields_parts[0].strip() if len(fields_parts) > 0 else ""
    givenName = fields_parts[1].strip() if len(fields_parts) > 1 else ""

    # Build the wikilink using aliases if available; otherwise use the givenName.
    if aliases:
        transform = f"[[{filename}|{aliases}]]"
    else:
        transform = f"[[{filename}|{givenName}]]"

    if args.debug:
        print("[DEBUG] Transform output:", transform)

    # Send the processed link to the active tmux pane.
    try:
        subprocess.run(["tmux", "send-keys", transform], check=True)
    except Exception as e:
        print(f"Error sending keys to tmux: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == '__main__':
    main()

