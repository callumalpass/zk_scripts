#!/usr/bin/env python3
"""
Improved Poll Backlinks & Note Viewer – Using py_zk

Features:
  • Connects to Neovim over a socket and displays three toggleable lists for the current file:
      – BACKLINKS: notes that reference the current note
      – SIMILAR: similar notes computed using embeddings
      – OUTGOING: notes that the current note links to
  • Filenames are processed relative to NOTES_DIR so that folder names are retained and the ".md" suffix is removed.
  • In wide terminals, the UI splits vertically (notes list on the left, preview on the right), with clearer borders,
    scroll progress, and additional visual cues.
  • A help overlay (triggered with "?") shows all the available commands.
  • The header and status bar display the current file, mode, and available commands.
  • Basic colors (set via curses) highlight the current selection and other UI elements.
  • New “g” keybinding: sends a wikilink of the currently selected note to workingMem.md in your notes directory
  • Additional keys for improving usability:
      – h     : Reset the preview scroll to the top (helpful if you want to quickly see the start of the note)
      – Status bar now also displays the scroll percentage when previewing a note

Controls:
  • l      — Cycle list mode (backlinks → similar → outgoing → backlinks …)
  • ?      — Toggle help overlay
  • ↑ / k  — Move selection up
  • ↓ / j  — Move selection down
  • PageUp/PageDown — Scroll the preview window up/down
  • h      — Jump preview to top
  • Enter  — Open the selected note in Neovim
  • g      — Send wikilink for selected note to workingMem.md
  • q      — Quit
"""

import os, sys, time, curses, logging, json, textwrap
from pathlib import Path
import numpy as np

import pynvim
import openai

# Import py_zk’s functions and classes.
import py_zk
py_zk.os = os
from py_zk import Note, load_index_data, get_embedding

# --- Configuration ---
CONFIG = {
    "NOTES_DIR": os.path.expanduser("~/Dropbox/notes"),
    "THESIS_DIR": os.path.expanduser("~/Dropbox/notes"),  # for backward compatibility
    "INDEX_FILE": os.path.expanduser("~/Dropbox/notes/index.json"),
    "EMBEDDINGS_FILE": os.path.expanduser("~/Dropbox/notes/embeddings.json"),
    "STATUS_BAR_CLEAR_TIME": 3,
    "SIMILAR_K": 25,
    "PREVIEW_SCROLL_LINES": 3,
    "LOG_FILE": os.path.join(os.path.expanduser("~/.cache"), "poll_backlinks.log"),
    "WORKING_MEM": "workingMem.md"   # New file for wikilinks.
}

os.makedirs(os.path.dirname(CONFIG["LOG_FILE"]), exist_ok=True)

# --- Logging Setup ---
logger = logging.getLogger("PollBacklinks")
logger.setLevel(logging.DEBUG)
handler = logging.FileHandler(CONFIG["LOG_FILE"])
formatter = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)

# --- Preview Class (with scrolling and simple wrapping) ---
class Preview:
    def __init__(self, filepath: str) -> None:
        self.filepath = filepath
        self.file_lines = []
        self.total_lines = 0
        self.view_start = 0  # current top line in the preview window
        try:
            with open(self.filepath, "r", encoding="utf8") as f:
                self.file_lines = [line.rstrip() for line in f.readlines()]
            self.total_lines = len(self.file_lines)
        except Exception as e:
            logger.exception(f"Failed to load preview for {self.filepath}: {e}")
            self.file_lines = [f"Error loading preview: {e}"]
            self.total_lines = 1

    def get_visible_lines(self, height: int, width: int) -> (list, float):
        output = []
        # determine scroll percentage for UI feedback.
        scroll_pct = (self.view_start / max(1, self.total_lines - height)) * 100
        if self.view_start > 0:
            output.append("^^^")
        for idx in range(self.view_start, min(self.view_start + height, self.total_lines)):
            line = self.file_lines[idx]
            wrapped = textwrap.wrap(line, width=width-2) if line else [""]
            for wline in wrapped:
                output.append(" " + wline)
        if self.view_start + height < self.total_lines:
            output.append("vvv")
        return output, scroll_pct

    def scroll_down(self, amount: int, height: int) -> None:
        max_start = max(0, self.total_lines - height)
        self.view_start = min(self.view_start + amount, max_start)

    def scroll_up(self, amount: int) -> None:
        self.view_start = max(0, self.view_start - amount)

    def jump_to_top(self) -> None:
        self.view_start = 0

    def jump_to_bottom(self, height: int) -> None:
        self.view_start = max(0, self.total_lines - height)

# --- Utility Functions ---
def get_note_body(note: Note) -> str:
    if hasattr(note, 'body') and note.body:
        return note.body
    filepath = os.path.join(CONFIG["THESIS_DIR"], note.filename + ".md")
    if os.path.exists(filepath):
        try:
            with open(filepath, "r", encoding="utf8") as f:
                return f.read()
        except Exception as e:
            logger.exception(f"Failed to read file {filepath} for body: {e}")
    return ""

def format_note_item(note: Note) -> str:
    return f"{note.filename}: {note.title or '(No Title)'}"

def get_relative_note_name(full_path: str) -> str:
    abs_notes = os.path.abspath(CONFIG["NOTES_DIR"])
    abs_file = os.path.abspath(full_path)
    try:
        rel = os.path.relpath(abs_file, abs_notes)
        if rel.lower().endswith(".md"):
            rel = rel[:-3]
        return rel
    except Exception as e:
        logger.exception(f"Error computing relative note name: {e}")
        return full_path

# --- Compute Similar Notes ---
def compute_similar_notes(current_note: Note, all_notes: list, embeddings_path: Path, k: int) -> list:
    try:
        with embeddings_path.open("r", encoding="utf-8") as f:
            embeddings_map = json.load(f)
    except Exception as e:
        logger.exception(f"Error loading embeddings from {embeddings_path}: {e}")
        return [f"Error loading embeddings: {e}"]

    query_id = current_note.filename
    if query_id in embeddings_map:
        query_embedding = embeddings_map[query_id]
    else:
        body_text = get_note_body(current_note)
        try:
            query_embedding = get_embedding(body_text)
        except Exception as e:
            logger.exception(f"Error computing embedding for {query_id}: {e}")
            return [f"Error computing embedding: {e}"]

    available_ids = []
    embeddings_list = []
    for note in all_notes:
        nid = note.filename
        if nid in embeddings_map:
            available_ids.append(nid)
            embeddings_list.append(embeddings_map[nid])
    if not embeddings_list:
        return ["No embeddings available for similarity search."]

    def normalize(vec: np.ndarray) -> np.ndarray:
        return vec / (np.linalg.norm(vec) + 1e-10)

    qvec = normalize(np.array(query_embedding, dtype="float32"))
    sim_list = []
    for embed in embeddings_list:
        vec = normalize(np.array(embed, dtype="float32"))
        sim = float(np.dot(qvec, vec))
        sim_list.append(sim)

    sim_indices = sorted(range(len(sim_list)), key=lambda i: sim_list[i], reverse=True)
    results = []
    for idx in sim_indices:
        if available_ids[idx] == query_id:
            continue
        note = next((n for n in all_notes if n.filename == available_ids[idx]), None)
        if note:
            results.append(format_note_item(note) + f" (score: {sim_list[idx]:.4f})")
        if len(results) >= k:
            break
    if not results:
        return ["No similar notes found."]
    return results

# --- UI State Management ---
class UIState:
    def __init__(self) -> None:
        self.selected_idx = 0
        self.list_offset = 0
        self.current_file = ""
        self.all_notes = []
        self.current_note = None
        self.list_mode = "backlinks"  # "backlinks", "similar", "outgoing"
        self.displayed_list = []
        self.status_message = ""
        self.status_message_time = 0
        self.preview_cache = {}
        self.show_help = False

    def set_status(self, msg: str) -> None:
        self.status_message = msg
        self.status_message_time = time.time()

    def reset_selection(self) -> None:
        self.selected_idx = 0
        self.list_offset = 0

# --- Additional Functionality: Send Wikilink ---
def send_wikilink(ui: UIState):
    """Send the wikilink for the currently selected note to workingMem.md."""
    entry = get_current_entry(ui)
    if not entry:
        ui.set_status("No note selected to send wikilink.")
        return
    note_key = entry.split(":", 1)[0]
    wikilink = f"[[{note_key}]]\n"
    working_mem_path = os.path.join(CONFIG["NOTES_DIR"], CONFIG["WORKING_MEM"])
    try:
        with open(working_mem_path, "a", encoding="utf8") as f:
            f.write(wikilink)
        ui.set_status(f"Wikilink for {note_key} added to {CONFIG['WORKING_MEM']}")
    except Exception as e:
        logger.exception(f"Error writing wikilink to {working_mem_path}: {e}")
        ui.set_status(f"Error writing wikilink: {e}")

# --- Help Overlay ---
def draw_help_overlay(stdscr, height, width):
    # Create a full-screen overlay with a reverse-video attribute.
    overlay_win = curses.newwin(height, width, 0, 0)
    overlay_win.bkgd(' ', curses.color_pair(3) | curses.A_REVERSE)
    overlay_text = [
        "Help - Available Commands:",
        "",
        "↑ / k         : Move selection up",
        "↓ / j         : Move selection down",
        "PgUp / PgDn   : Scroll preview",
        "h             : Jump preview to top",
        "Enter         : Open selected note in Neovim",
        "l             : Toggle list mode (backlinks, similar, outgoing)",
        "g             : Send wikilink for selected note to workingMem.md",
        "?             : Toggle this help overlay",
        "q             : Quit",
        "",
        "Press any key to dismiss help..."
    ]
    # Calculate vertical starting point.
    start_y = (height - len(overlay_text)) // 2
    for idx, line in enumerate(overlay_text):
        x = (width - len(line)) // 2
        try:
            overlay_win.addstr(start_y+idx, x, line, curses.A_BOLD)
        except curses.error:
            pass
    overlay_win.refresh()
    overlay_win.getch()

# --- UI Drawing Functions ---
MIN_HEIGHT = 15
MIN_WIDTH = 40

def draw_ui(stdscr, ui: UIState):
    stdscr.erase()
    height, width = stdscr.getmaxyx()

    if height < MIN_HEIGHT or width < MIN_WIDTH:
        msg = f"Terminal too small! (min: {MIN_WIDTH}x{MIN_HEIGHT}, current: {width}x{height})"
        stdscr.addnstr(0, 0, msg, width, curses.A_BOLD)
        stdscr.refresh()
        return

    # --- Header ---
    header_height = 3
    try:
        header_win = stdscr.subwin(header_height, width, 0, 0)
    except curses.error:
        header_win = stdscr
    header_win.erase()
    header_win.border()
    header_text = f"File: {os.path.basename(ui.current_file) if ui.current_file else 'None'} | Mode: {ui.list_mode.upper()}"
    header_hint = " | Press '?' for help"
    header_win.addnstr(1, 2, header_text + header_hint, width-4, curses.color_pair(1) | curses.A_BOLD)

    # --- Main Area: List & Preview ---
    main_area_y = header_height
    status_bar_height = 3
    main_area_height = height - main_area_y - status_bar_height

    if width >= 100:
        # Vertical split: notes list on the left, preview on the right.
        list_panel_width = int(width * 0.3)
        preview_panel_width = width - list_panel_width
        # List Panel:
        try:
            list_win = stdscr.subwin(main_area_height, list_panel_width, main_area_y, 0)
        except curses.error:
            list_win = stdscr
        list_win.erase()
        list_win.border()
        list_win.addnstr(0, 2, " Notes List ", list_panel_width-4, curses.A_BOLD | curses.color_pair(1))
        visible_lines = main_area_height - 2
        for i in range(visible_lines):
            idx = ui.list_offset + i
            if idx >= len(ui.displayed_list):
                break
            line = ui.displayed_list[idx]
            attr = curses.A_NORMAL
            if idx == ui.selected_idx:
                attr = curses.color_pair(2) | curses.A_BOLD
            try:
                list_win.addnstr(i+1, 2, line, list_panel_width-4, attr)
            except curses.error:
                pass

        # Preview Panel:
        try:
            preview_win = stdscr.subwin(main_area_height, preview_panel_width, main_area_y, list_panel_width)
        except curses.error:
            preview_win = stdscr
        preview_win.erase()
        preview_win.border()
        preview_win.addnstr(0, 2, " Preview ", preview_panel_width-4, curses.A_BOLD | curses.color_pair(1))
        scroll_pct = None
        if ui.displayed_list and ui.selected_idx < len(ui.displayed_list):
            entry = ui.displayed_list[ui.selected_idx]
            note_key = entry.split(":", 1)[0]
            filepath = os.path.join(CONFIG["THESIS_DIR"], note_key + ".md")
            if note_key in ui.preview_cache:
                preview = ui.preview_cache[note_key]
            else:
                preview = Preview(filepath)
                ui.preview_cache[note_key] = preview
            vis_lines, scroll_pct = preview.get_visible_lines(main_area_height-2, preview_panel_width-4)
            for i, line in enumerate(vis_lines[:main_area_height-2]):
                try:
                    preview_win.addnstr(i+1, 2, line, preview_panel_width-4)
                except curses.error:
                    pass
        # Display scroll percentage in the lower right corner.
        if scroll_pct is not None:
            perc_text = f"{scroll_pct:3.0f}%"
            try:
                preview_win.addnstr(main_area_height-1, preview_panel_width-len(perc_text)-2, perc_text, len(perc_text), curses.A_DIM)
            except curses.error:
                pass
    else:
        # Fallback: stacked layout.
        half_area = (main_area_height - 2) // 2
        # List window (top).
        try:
            list_win = stdscr.subwin(half_area + 2, width, main_area_y, 0)
        except curses.error:
            list_win = stdscr
        list_win.erase()
        list_win.border()
        list_win.addnstr(0, 2, " Notes List ", width-4, curses.A_BOLD | curses.color_pair(1))
        visible_lines = half_area - 1
        for i in range(visible_lines):
            idx = ui.list_offset + i
            if idx >= len(ui.displayed_list):
                break
            line = ui.displayed_list[idx]
            attr = curses.A_NORMAL
            if idx == ui.selected_idx:
                attr = curses.color_pair(2) | curses.A_BOLD
            try:
                list_win.addnstr(i+1, 2, line, width-4, attr)
            except curses.error:
                pass

        # Preview window (bottom).
        try:
            preview_win = stdscr.subwin(half_area + 2, width, main_area_y + half_area + 2, 0)
        except curses.error:
            preview_win = stdscr
        preview_win.erase()
        preview_win.border()
        preview_win.addnstr(0, 2, " Preview ", width-4, curses.A_BOLD | curses.color_pair(1))
        scroll_pct = None
        if ui.displayed_list and ui.selected_idx < len(ui.displayed_list):
            entry = ui.displayed_list[ui.selected_idx]
            note_key = entry.split(":", 1)[0]
            filepath = os.path.join(CONFIG["THESIS_DIR"], note_key + ".md")
            if note_key in ui.preview_cache:
                preview = ui.preview_cache[note_key]
            else:
                preview = Preview(filepath)
                ui.preview_cache[note_key] = preview
            vis_lines, scroll_pct = preview.get_visible_lines(half_area - 1, width-4)
            for i, line in enumerate(vis_lines[:half_area - 1]):
                try:
                    preview_win.addnstr(i+1, 2, line, width-4)
                except curses.error:
                    pass
        if scroll_pct is not None:
            perc_text = f"{scroll_pct:3.0f}%"
            try:
                preview_win.addnstr(half_area, width-len(perc_text)-2, perc_text, len(perc_text), curses.A_DIM)
            except curses.error:
                pass

    # --- Status Bar ---
    try:
        status_win = stdscr.subwin(status_bar_height, width, height - status_bar_height, 0)
    except curses.error:
        status_win = stdscr
    status_win.erase()
    status_win.border()
    help_text = ("Commands: ↑/k, ↓/j: Move  |  PgUp/PgDn: Scroll Preview  |  l: Toggle Mode  | "
                 "Enter: Open  |  g: Wikilink  |  h: Top  |  q: Quit")
    disp_status = ui.status_message if (time.time() - ui.status_message_time
                                         < CONFIG["STATUS_BAR_CLEAR_TIME"]) else help_text
    status_win.addnstr(1, 2, disp_status, width-4, curses.A_BOLD | curses.color_pair(3))
    stdscr.refresh()

# --- Input Handling ---
def get_current_entry(ui: UIState) -> str:
    if ui.displayed_list and ui.selected_idx < len(ui.displayed_list):
        return ui.displayed_list[ui.selected_idx]
    return ""

def update_displayed_list(ui: UIState, embeddings_path: Path):
    if ui.current_note is None:
        ui.displayed_list = ["No note found in index."]
        return
    if ui.list_mode == "backlinks":
        if ui.current_note.backlinks:
            disp = []
            for bk in ui.current_note.backlinks:
                note_obj = next((n for n in ui.all_notes if n.filename == bk), None)
                if note_obj:
                    disp.append(format_note_item(note_obj))
                else:
                    disp.append(bk + ": (Not found)")
            ui.displayed_list = disp
        else:
            ui.displayed_list = ["No backlinks found."]
    elif ui.list_mode == "outgoing":
        if ui.current_note.outgoing_links:
            disp = []
            for ot in ui.current_note.outgoing_links:
                note_obj = next((n for n in ui.all_notes if n.filename == ot), None)
                if note_obj:
                    disp.append(format_note_item(note_obj))
                else:
                    disp.append(ot + ": (Not found)")
            ui.displayed_list = disp
        else:
            ui.displayed_list = ["No outgoing links."]
    elif ui.list_mode == "similar":
        similar = compute_similar_notes(ui.current_note, ui.all_notes, Path(CONFIG["EMBEDDINGS_FILE"]), CONFIG["SIMILAR_K"])
        ui.displayed_list = similar
    ui.preview_cache = {}

def get_current_file(nvim) -> str:
    try:
        full = nvim.eval("expand('%:p')")
        return get_relative_note_name(full)
    except Exception as e:
        logger.exception("Error getting current file")
        return ""

def update_ui_state(nvim, ui: UIState, index_path: Path, embeddings_path: Path):
    current_file = get_current_file(nvim)
    if current_file != ui.current_file:
        ui.current_file = current_file
        try:
            notes = load_index_data(index_path)
            ui.all_notes = notes
        except Exception as e:
            ui.set_status(f"Error loading index: {e}")
            ui.all_notes = []
        note = None
        for n in ui.all_notes:
            fname = n.filename
            if fname.lower().endswith(".md"):
                fname = fname[:-3]
            if fname == current_file:
                note = n
                break
        ui.current_note = note
        ui.reset_selection()
        update_displayed_list(ui, embeddings_path)
    # Otherwise, keep the current index.

def handle_input(stdscr, nvim, ui: UIState, index_path: Path, embeddings_path: Path) -> bool:
    key = stdscr.getch()
    # If no key was pressed.
    if key == -1:
        return True

    # Toggle help overlay.
    if key == ord("?"):
        ui.show_help = True
        draw_help_overlay(stdscr, *stdscr.getmaxyx())
        ui.show_help = False
        return True

    if key in (ord("l"), ord("L")):
        if ui.list_mode == "backlinks":
            ui.list_mode = "similar"
            ui.set_status("Switched to SIMILAR")
        elif ui.list_mode == "similar":
            ui.list_mode = "outgoing"
            ui.set_status("Switched to OUTGOING")
        else:
            ui.list_mode = "backlinks"
            ui.set_status("Switched to BACKLINKS")
        ui.reset_selection()
        update_displayed_list(ui, embeddings_path)
        return True

    if key in (ord("g"), ord("G")):
        send_wikilink(ui)
        return True

    # Jump preview to top with "h" key:
    if key == ord("h"):
        curr_entry = get_current_entry(ui)
        if curr_entry:
            note_key = curr_entry.split(":", 1)[0]
            if note_key in ui.preview_cache:
                ui.preview_cache[note_key].jump_to_top()
                ui.set_status("Preview set to top.")
        return True

    if key in (curses.KEY_UP, ord("k")):
        if ui.selected_idx > 0:
            ui.selected_idx -= 1
            if ui.selected_idx < ui.list_offset:
                ui.list_offset = ui.selected_idx
    elif key in (curses.KEY_DOWN, ord("j")):
        if ui.selected_idx < len(ui.displayed_list) - 1:
            ui.selected_idx += 1
            # Adjust list offset based on layout.
            if width := stdscr.getmaxyx()[1]:
                max_visible = ((stdscr.getmaxyx()[0]-6)//2 - 1) if width < 100 else (stdscr.getmaxyx()[0]-6-2)
                if ui.selected_idx >= ui.list_offset + max_visible:
                    ui.list_offset += 1
    elif key == curses.KEY_NPAGE:
        curr_entry = get_current_entry(ui)
        if curr_entry:
            note_key = curr_entry.split(":", 1)[0]
            if note_key in ui.preview_cache:
                preview_height = stdscr.getmaxyx()[0] - 6
                ui.preview_cache[note_key].scroll_down(CONFIG["PREVIEW_SCROLL_LINES"], preview_height)
    elif key == curses.KEY_PPAGE:
        curr_entry = get_current_entry(ui)
        if curr_entry:
            note_key = curr_entry.split(":", 1)[0]
            if note_key in ui.preview_cache:
                ui.preview_cache[note_key].scroll_up(CONFIG["PREVIEW_SCROLL_LINES"])
    elif key in (10, 13, curses.KEY_ENTER):
        if ui.selected_idx < len(ui.displayed_list):
            entry = ui.displayed_list[ui.selected_idx]
            note_key = entry.split(":", 1)[0]
            filepath = os.path.join(CONFIG["THESIS_DIR"], note_key + ".md")
            try:
                nvim.command(f"edit {filepath}")
                ui.set_status(f"Opened {note_key}")
            except Exception as e:
                ui.set_status(f"Error opening {note_key}: {e}")
    elif key in (ord("q"), ord("Q")):
        return False
    return True

def interactive_ui(stdscr, nvim, index_path: str, embeddings_path: str):
    curses.curs_set(0)
    stdscr.nodelay(True)
    stdscr.timeout(100)

    # Initialize color pairs.
    curses.start_color()
    curses.use_default_colors()
    curses.init_pair(1, curses.COLOR_CYAN, -1)      # Headers & labels.
    curses.init_pair(2, curses.COLOR_GREEN, -1)     # Selected items.
    curses.init_pair(3, curses.COLOR_MAGENTA, -1)   # Status / help overlay.

    ui = UIState()
    running = True
    while running:
        new_height, new_width = stdscr.getmaxyx()
        if curses.is_term_resized(new_height, new_width):
            curses.resizeterm(new_height, new_width)
        update_ui_state(nvim, ui, Path(index_path), Path(embeddings_path))
        draw_ui(stdscr, ui)
        running = handle_input(stdscr, nvim, ui, Path(index_path), Path(embeddings_path))
        if ui.status_message and (time.time() - ui.status_message_time > CONFIG["STATUS_BAR_CLEAR_TIME"]):
            ui.status_message = ""
        time.sleep(0.01)

def main():
    if not os.path.isdir(CONFIG["NOTES_DIR"]):
        logger.error(f"NOTES_DIR does not exist: {CONFIG['NOTES_DIR']}")
        sys.exit(f"Error: NOTES_DIR does not exist: {CONFIG['NOTES_DIR']}")
    if not os.path.exists(CONFIG["INDEX_FILE"]):
        logger.error(f"INDEX_FILE does not exist: {CONFIG['INDEX_FILE']}")
        sys.exit(f"Error: INDEX_FILE does not exist: {CONFIG['INDEX_FILE']}")
    try:
        nvim = pynvim.attach("socket", path="/tmp/obsidian.sock")
    except Exception as e:
        logger.exception("Failed to attach to Neovim socket")
        sys.exit("Failed to attach to Neovim socket: " + str(e))
    curses.wrapper(interactive_ui, nvim, CONFIG["INDEX_FILE"], CONFIG["EMBEDDINGS_FILE"])

if __name__ == "__main__":
    main()

