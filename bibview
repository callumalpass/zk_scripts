#!/usr/bin/env bash

CONFIG_FILE="/home/calluma/.config/zk_scripts/config.yaml"

source /home/calluma/mybin/config_loader.sh

load_config "$CONFIG_FILE" "bibview" # Call load_config with config file and script section name


# Function to display the key bindings and their actions
show_key_bindings() {
    (
        echo -e "\033[36m"ctrl-space'  :'"\033[0m\033[3m""Open pdf in evince\033[0m"
        echo -e "\033[36m"ctrl-z'  :'"\033[0m\033[3m""Open pdf in evince and abort\033[0m"
        echo -e "\033[36m"ctrl-e'  :'"\033[0m\033[3m""Generate a zettel for bib entry, if none exists\033[0m"
        echo -e "\033[36m"ctrl-v'  :'"\033[0m\033[3m""Open pdf in qpdfview in a right split\033[0m"
        echo -e "\033[36m"ctrl-y'  :'"\033[0m\033[3m""Copy the citation key\033[0m"
        echo -e "\033[36m"ctrl-f'  :'"\033[0m\033[3m""Open in nnn\033[0m"
        echo -e "\033[36m"alt-n'  :'"\033[0m\033[3m""Next history\033[0m"
        echo -e "\033[36m"alt-p'  :'"\033[0m\033[3m""Previous history\033[0m"
        echo -e "\033[36m"alt-y'  :'"\033[0m\033[3m""Copy path of the pdf\033[0m"
        echo -e "\033[36m"/'  :'"\033[0m\033[3m""Toggle preview\033[0m"
        echo -e "\033[36m"ctrl-t'  :'"\033[0m\033[3m""Track reading of bibliographic entry\033[0m"
        echo -e "\033[36m"alt-g'  :'"\033[0m\033[3m""Send to Gemini for humanist reading critique\033[0m"
        echo -e "\033[36m"alt-t'  :'"\033[0m\033[3m""Translate to English\033[0m"
) | sort | column -t -s ':' -N 'Key,Action'
    exit 0
}

# Check if the key bindings should be displayed
if [ "${_TASKFZF_SHOW}" = "keys" ]; then
    show_key_bindings
fi

# # Source the default fzf options
# if [[ -f "$FZF_DEFAULT_OPTS_FILE" ]]; then
#     source "$FZF_DEFAULT_OPTS_FILE"
# else
#     echo "Warning: fzf default options file '$FZF_DEFAULT_OPTS_FILE' not found." >&2
# fi


# Set the default editor
export EDITOR="nvim"

# Extract the bibliographic data based on the command-line argument
if [[ $1 == "year" ]]; then
    data=$(gojq -r '. | sort_by(.year) | reverse[] | [ (.issued?."date-parts"?[0][0])? , .id? , ([.author[]? // .editor[]? | .given? + " " + .family?] | join(", ")) , .title? , .type?, .abstract? ] | @tsv' "$BIBLIOGRAPHY_JSON")
else
    data=$(gojq -r '. | sort_by(.dateModified) | reverse[] | [ (.issued?."date-parts"?[0][0])? , .id? , ([.author[]? // .editor[]? | .given? + " " + .family?] | join(", ")) , .title? , .type?, .abstract? ] | @tsv' "$BIBLIOGRAPHY_JSON")
fi

# Process the bibliographic data and format it for fzf
formatted_data=$(
    awk -F'\t' 'BEGIN {OFS="|"}; {
        if ($5=="chapter") icon="📖"
        else if ($5=="book") icon="📕"
        else if ($5=="article-journal") icon="📝"
        else if ($5=="article-newspaper") icon="🗞"
        else if ($5=="thesis") icon="🎓"
        else icon="❓"
        print"\033[36m\033[3"2"m"$2, "\033[0m""\033[0m"$1,icon, "\033[0m""\033[3m"substr($4, 1, 90), "\033[0m""\033[34m"$3"\033[0m", $6
    }' <<< "$data" |
    column -s '|' -t -N 'Citekey,Year, ,Title,Authors/Editors,Abstract'
)

# Launch fzf with customized options and key bindings
fzf --ansi \
    --multi \
    --tiebreak begin,index \
    --header-lines='1' \
    --preview-window 'right:wrap:38%,<80(up)' \
    --history="$BIBHIST" \
    --bind "alt-n:next-history" \
    --bind "alt-p:previous-history" \
    --bind "alt-b:execute[\"$BIBVIEW_OPEN_DOC_SCRIPT\" {1} obsidian ; timew start phd reading {1} ; echo {} >> \"$BIBHIST\"]+abort" \
    --info inline \
    --bind "/:toggle-preview" \
    --bind "alt-g:execute[\"$LLM_PATH\" -t humanist-reading-critique -a $LIBRARY/{1}/{1}.pdf  > $LIBRARY/{1}/{1}.pdf_analysis.md  ]" \
    --bind "alt-t:execute[\"$LLM_PATH\" -t translate_to_english -a $LIBRARY/{1}/{1}.pdf  > $LIBRARY/{1}/{1}.pdf_translation.md ]" \
    --bind "Ctrl-a:execute[\"$ZK_SCRIPT\" -W \"$NOTES_DIR_FOR_ZK\" list --format '{{path}} | {{title}} |{{tags}}' \`rg {1}  \"$NOTES_DIR_FOR_ZK\" -l || echo 'error'\` | ~/mybin/rgnotesearch ]" \
    --bind "ctrl-f:execute[nnn \"$LIBRARY/\"{1}]" \
    --bind "ctrl-r:execute[~/mybin/addToReadingList {1} ]"\
    --bind "Ctrl-e:execute[nvim --server \"$OBSIDIAN_SOCKET\" --remote  $LIBRARY/../@{1}.md]"\
    --bind "alt-z:execute[\"$LINK_ZATHURA_TMP_SCRIPT\" {1}]" \
    --bind "Ctrl-y:execute[echo {+1} | wl-copy ]+abort" \
    --bind "Ctrl-t:execute[timew start phd reading {1}]+abort" \
    --bind "Ctrl-space:execute[ \"$BIBVIEW_OPEN_DOC_SCRIPT\" {1} evince ; timew start phd reading {1} ; echo {1} >> \"$BIBHIST\"]" \
    --bind "Ctrl-z:execute[hyprctl dispatch exec  evince \" $LIBRARY/{1}/{1}.**\" ; echo {1} >> \"$BIBHIST\"]+abort" \
    --bind "?:execute(env _TASKFZF_SHOW=keys \"$0\" | fzf --ansi --header=Help --header-first --info=hidden --bind \"?:abort\")" \
    --bind "Enter:execute[\"$BIBVIEW_OPEN_DOC_SCRIPT\" {1} obsidian ; echo {} >> \"$BIBHIST\"]+abort" \
    --preview "ls --color=always -c -l -h $LIBRARY/{1}/; echo '\nCited in:'  ;  rg {1}  \"$NOTES_DIR_FOR_ZK\" -l --type markdown || echo 'error' ;  bat --theme=\"$BAT_THEME\" ~/Dropbox/notes/@{1}.md 2> /dev/null " \
    <<< "$formatted_data"
